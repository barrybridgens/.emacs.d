#+STARTUP: overview

* Startup Directory
#+begin_src emacs-lisp
  (cd "/home/barry/Dropbox/Documents/org")
#+end_src

* Interface Tweaks
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (set-scroll-bar-mode 'right)
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+end_src

* Try
#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src

* Which-key
Brings up some elp
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

* Swiper
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
  )

  (use-package swiper
    :ensure try
    :config
    (progn
          (ivy-mode 1)
          (setq ivy-use-virtual-buffers t)
          (global-set-key "\C-s" 'swiper)
          (global-set-key (kbd "C-c C-r") 'ivy-resume)
          (global-set-key (kbd "<f6>") 'ivy-resume)
          (global-set-key (kbd "M-x") 'counsel-M-x)
          (global-set-key (kbd "C-x C-f") 'counsel-find-file)
          (global-set-key (kbd "<f1> f") 'counsel-describe-function)
          (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
          (global-set-key (kbd "<f1> l") 'counsel-load-library)
          (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
          (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
          (global-set-key (kbd "C-c g") 'counsel-git)
          (global-set-key (kbd "C-c j") 'counsel-git-grep)
          (global-set-key (kbd "C-c k") 'counsel-ag)
          (global-set-key (kbd "C-x l") 'counsel-locate)
          (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
          (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
          ))
#+end_src

* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+end_src

* ibuffer
#+begin_src emacs-lisp
  (defalias 'list-buffers 'ibuffer)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (or

                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("programming" (or
                                 (mode . clojure-mode)
                                 (mode . clojurescript-mode)
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
#+end_src
* emmet-mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :init
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    )
#+end_src
* ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+end_src
* Auto-complete
#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
          (ac-config-default)
          (global-auto-complete-mode t)
          ))
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package darkburn-theme
    :ensure t
    :config (load-theme 'darkburn t))
#+end_src

* Line Numbers
#+begin_src emacs-lisp
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
#+end_src

* org-mode
** General
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when global-font-lock-mode is on
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (setq org-directory "~/Dropbox/Documents/org")
  (setq org-agenda-files (list org-directory))
  (setq org-agenda-dim-blocked-tasks 'invisible)
  (setq org-agenda-todo-ignore-deadlines (quote far))
  (setq org-deadline-warning-days 2)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-enforce-todo-dependencies t)
  (setq org-hide-leading-stars t)
  (setq org-startup-indented t)
  ;(setq org-agenda-todo-ignore-scheduled t)
  ;(setq org-agenda-todo-ignore-deadlines t)
  (setq org-agenda-todo-ignore-with-date t)
  (global-set-key "\C-ca" 'org-agenda)
  (setq org-todo-keywords
        '((sequence "TODO" "WAITING" "PROJECT" "|"  "DELEGATED" "CANCELLED" "DONE")))
  (setq org-highest-priority 65)
  (setq org-lowest-priority 69)
  (setq org-default-priority 68)
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
      :ensure t)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
        :hook
        (after-init . org-roam-mode)
        :custom
        (org-roam-directory "~/Dropbox/Documents/org")
        :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n j" . org-roam-jump-to-index)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))))
#+end_src

* Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+end_src

* Programming
** General
#+begin_src emacs-lisp
  (setq default-tab-width 4)
  (show-paren-mode 1)
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)

  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src
** Slime
#+begin_src emacs-lisp
  (global-set-key "\C-cs" 'slime-selector)
#+end_src
** Clojure
#+begin_src emacs-lisp
  (use-package cider
    :ensure t)
#+end_src
** Golang
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t)
  (use-package go-playground
    :ensure t)
#+end_src
* My elisp functions
** Journal file functions
#+begin_src emacs-lisp
    (defun bjb-journal-new-entry ()
      "Add a new journal entry at the end of the journal file"
      (interactive)
      (switch-to-buffer "journal2021.org")
      (goto-char (point-max))
      (insert (format-time-string "\n** %A "))
      (insert (format-time-string "%e "))
      (insert (format-time-string "%B "))
      (insert (format-time-string "%Y\n"))
      (insert "*** Habits [/]\n")
      (insert "- [ ] Morning Pills\n")
      (insert "- [ ] Evening Pills\n")
      (insert "- [ ] Exercise\n")
      (insert "- [ ] Guitar\n")
      (insert "- [ ] Learning\n")
      (insert "*** Working from home - delete if not!\n")
      (insert "*** In the house\n")
      (insert "*** Out and about\n")
      (insert "*** Food\n")
      (insert "*** Physical\n")
      (insert "*** Mental\n"))

    (defun bjb-journal-new-entry-tomorrow ()
      "Add a new journal entry for tomorrow at the end of the journal file"
      (interactive)
      (switch-to-buffer "journal2021.org")
      (goto-char (point-max))
      (let ((tomorrow (time-add (current-time) (* 60 60 24))))
        (insert (format-time-string "\n** %A " tomorrow))
        (insert (format-time-string "%e " tomorrow))
        (insert (format-time-string "%B " tomorrow))
        (insert (format-time-string "%Y\n" tomorrow)))
      (insert "*** Habits [/]\n")
      (insert "- [ ] Morning Pills\n")
      (insert "- [ ] Evening Pills\n")
      (insert "- [ ] Exercise\n")
      (insert "- [ ] Guitar\n")
      (insert "- [ ] Learning\n")
      (insert "*** Working from home - delete if not!\n")
      (insert "*** In the house\n")
      (insert "*** Out and about\n")
      (insert "*** Food\n")
      (insert "*** Physical\n")
      (insert "*** Mental\n"))

  (defun bjb-new-weekly-review ()
      "Add a new weekly review entry at the end of the journal file"
    (interactive)
    (switch-to-buffer "journal2021.org")
    (goto-char (point-max))
    (insert (format-time-string "\n** Week %V "))
    (insert (format-time-string "%G - Weekly Review\n"))
    (insert "*** Checklist [/]\n")
    (insert "- [ ] Process all items in *inbox.org*\n")
    (insert "- [ ] Process all items in Evernote InBox\n")
    (insert "- [ ] Process all items in my physical inbox\n")
    (insert "- [ ] Check tasks in *todo.org* and add date and/or priority where appropriate\n")
    (insert "- [ ] Check overdue items in *agenda view*\n")
    (insert "- [ ] Check the HOME and WORK calendars for next week to see if there is anything that needs to be prepared for\n")
    (insert "- [ ] Check email inbox and folders - make sure everything is in the correct place (Make sure to check _TEMP, _ACTIONS and _HOLD)\n")
    (insert "- [ ] Review tasks in *agenda view* for next week\n")
    (insert "- [ ] Check *habit* performance and comment about it below\n")
    (insert "*** Notable things that happened this week\n"))
#+end_src

