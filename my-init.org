
#+STARTUP: overview

* Startup Directory
#+begin_src emacs-lisp
  (cd "/home/barry/Dropbox/Documents/org-roam")
#+end_src
* org-protocol
#+begin_src emacs-lisp
  (server-start)
  (require 'org-protocol)
#+end_src
* Interface Tweaks
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (defvar efs/frame-transparency '(97 . 97))

  (set-face-attribute 'default nil :font "FiraCode")

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :family "FiraCode" :height 1.0)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :family "Deja Vu Sans" :weight 'regular :height 1.0)

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
* Doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-minor-modes nil))
#+end_src
* Try
#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src
* Which-key
Brings up some elp
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
* Swiper
#+begin_src emacs-lisp
  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1))

    (use-package counsel
      :ensure t
    )

    (use-package swiper
      :ensure try
      :config
      (progn
            (ivy-mode 1)
            (setq ivy-use-virtual-buffers t)
            (global-set-key "\C-s" 'swiper)
            (global-set-key (kbd "C-c C-r") 'ivy-resume)
            (global-set-key (kbd "<f6>") 'ivy-resume)
            (global-set-key (kbd "M-x") 'counsel-M-x)
            (global-set-key (kbd "C-x C-f") 'counsel-find-file)
            (global-set-key (kbd "<f1> f") 'counsel-describe-function)
            (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
            (global-set-key (kbd "<f1> l") 'counsel-load-library)
            (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
            (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
            (global-set-key (kbd "C-c g") 'counsel-git)
            (global-set-key (kbd "C-c j") 'counsel-git-grep)
            (global-set-key (kbd "C-c k") 'counsel-ag)
            (global-set-key (kbd "C-x l") 'counsel-locate)
            (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
            (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
            ))
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+end_src
* Abbrev
#+begin_src elisp
  (setq-default abbrev-mode t)
  ;; save abbreviations upon exiting emacs
  (setq save-abbrevs t)
  ;; set the file storing the abbreviations
  (setq abbrev-file-name "/home/barry/Dropbox/Documents/my-abbreviations.el")
  ;; reads the abbreviations file on startup
  (quietly-read-abbrev-file)
#+end_src
* ibuffer
#+begin_src emacs-lisp
  (defalias 'list-buffers 'ibuffer)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (or

                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("programming" (or
                                 (mode . clojure-mode)
                                 (mode . clojurescript-mode)
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
#+end_src
* emmet-mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :init
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    )
#+end_src
* ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+end_src
* Auto-complete
#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
          (ac-config-default)
          (global-auto-complete-mode t)
          ))
#+end_src
* Theme
#+begin_src emacs-lisp
  (use-package hc-zenburn-theme
    :ensure t
    :config (load-theme 'hc-zenburn t))
#+end_src
* Line Numbers
#+begin_src emacs-lisp
  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
* File Management
** Dired
#+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump))
      :custom ((dired-listing-switches "-agho --group-directories-first")))
    (use-package all-the-icons-dired
      :ensure t
      :hook (dired-mode . all-the-icons-dired-mode)
      :config (setq all-the-icons-dired-monochrome nil))
#+end_src
* org-mode
** General
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  ;; (add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when global-font-lock-mode is on
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (setq org-ellipsis " ▾")
  (set-face-underline 'org-ellipsis nil)
  (setq org-return-follows-link t)

  (setq org-list-indent-offset 2)
  
  (require 'org-tempo)
#+end_src
** org-agenda
#+begin_src emacs-lisp
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)


  (setq org-directory "~/Dropbox/Documents/org")
  (setq org-roam-directory "~/Dropbox/Documents/org-roam")
  (setq org-agenda-files (list org-directory org-roam-directory))

        ;(setq org-agenda-files (apply 'append
        ;                              (mapcar
        ;                               (lambda (directory)
        ;                                 (directory-files-recursively
        ;                                  directory org-agenda-file-regexp))
        ;                               '("~/Dropbox/Documents/org" "~/Dropbox/Documents/org-roam" "~/Dropbox/Documents/org-old"))))

  (setq org-agenda-dim-blocked-tasks 'invisible)
  (setq org-agenda-todo-ignore-deadlines (quote far))
  (setq org-deadline-warning-days 2)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-enforce-todo-dependencies t)
  (setq org-hide-leading-stars t)
  (setq org-startup-indented t)
                                                ;(setq org-agenda-todo-ignore-scheduled t)
                                                ;(setq org-agenda-todo-ignore-deadlines t)


  (setq org-agenda-show-future-repeats 'next)

  (setq org-agenda-custom-commands
        '(
                ("n" "Agenda and all TODOs"
                 ((agenda "")
                  (alltodo "")))
                ("b" "Barry"
                 ((todo "NEXT"
                        ((org-agenda-overriding-header "Next Tasks")))
                  (todo "INPROG-TODO"
                        ((org-agenda-block-separator nil)
                         (org-agenda-overriding-header "\nIn-progress Tasks")))
                  (agenda ""
                          ((org-agenda-block-separator nil)
                          (org-agenda-span 1)
                          (org-deadline-warning-days 0)
                          (org-agenda-overriding-header "\nDaily Agenda")))
                  (agenda ""
                          ((org-agenda-block-separator nil)
                         (org-agenda-start-day "+1d")
                         (org-agenda-span 3)
                         (org-deadline-warning-days 0)
                         (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                         (org-agenda-overriding-header "\nNext 3 Days")))))
                ))

  (setq org-agenda-todo-ignore-with-date t)
  (setq org-todo-keywords
              '((sequence "TODO" "INPROG-TODO" "NEXT" "WAITING" "PROJECT"
                          "|"
                          "DONE" "CANCELLED")))
  (setq org-todo-keyword-faces '(("TODO" nil :foreground "orange1" :inherit fixed-pitch :weight medium)
                                       ("INPROG-TODO" nil :foreground "orange1" :inherit fixed-pitch :weight medium)
                                       ("NEXT" nil :foreground "coral1" :inherit fixed-pitch :weight medium)
                                       ("WAITINGY" nil :foreground "plum3" :inherit fixed-pitch :weight medium)
                                       ("PROJECT" nil :foreground "aquamarine3" :inherit fixed-pitch :weight medium)
				     
                                       ("DONE" nil :foreground "LawnGreen" :inherit fixed-pitch :weight medium)
                                       ("CANCELLED" nil :foreground "dark red" :inherit fixed-pitch :weight medium)))
  (setq org-highest-priority 65)
  (setq org-lowest-priority 69)
  (setq org-default-priority 67)
  (setq org-priority-faces
              '((65 nil :inherit fixed-pitch :foreground "red2" :weight medium)
                (66 . "Gold1")
                (67 . "Goldenrod2")
                (68 . "PaleTurquoise3")
                (69 . "DarkSlateGray4")
                (70 . "PaleTurquoise4")))
  (add-to-list 'org-modules 'org-habit t)
  (setq org-treat-insert-todo-heading-as-state-change t)
#+end_src
** Fonts
#+begin_src emacs-lisp
      (defun bjb/org-font-setup ()
        ;; Replace list hyphen with dot
        (font-lock-add-keywords 'org-mode
                                '(("^ *\\([-]\\) "
                                   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

        ;; Set faces for heading levels
        (dolist (face '((org-level-1 . 1.2)
                        (org-level-2 . 1.1)
                        (org-level-3 . 1.05)
                        (org-level-4 . 1.05)
                        (org-level-5 . 1.0)
                        (org-level-6 . 1.0)
                        (org-level-7 . 1.0)
                        (org-level-8 . 1.0)))
          ; (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))
          (set-face-attribute (car face) nil :weight 'regular :height (cdr face))
          )

        ;; Ensure that anything that should be fixed-pitch in Org files appears that way
        (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
        (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
        (set-face-attribute 'org-document-title nil :inherit 'fixed-pitch))

      (defun bjb/org-mode-setup ()
        (org-indent-mode)
        (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
        (variable-pitch-mode 1)
        (visual-line-mode 1))

      (add-hook 'org-mode-hook 'bjb/org-mode-setup)

      (bjb/org-font-setup)

  (setq org-emphasis-alist
    '(("*" (bold :slant italic :weight black :foreground "dark orange"))
      ("/" (italic :foreground "dark salmon" ))
      ("_" (underline :foreground "red" ))
      ("=" (:background "snow1" :foreground "midnight blue" ))
      ("~" (:background "PaleGreen1" :foreground "dim gray" ))
      ("+" (:strike-through nil :foreground "grey64" ))))

  (setq org-hide-emphasis-markers t)  

  ;; fontify code in code blocks
  (setq org-src-fontify-natively t)

#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")
    ;;; (org-bullets-bullet-list '(" " " " " " " " " " " " " ")
                             ))
#+end_src
** xvisual-fill
#+begin_src emacs-lisp
  (defun bjb/org-mode-visual-fill ()
    (setq visual-fill-column-width 140
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . bjb/org-mode-visual-fill))
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "/home/barry/Dropbox/Documents/org-roam")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "Project" plain
        (file "/home/barry/Dropbox/Documents/org-roam/templates/project_template.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))
    (org-roam-capture-ref-templates '(("l" "web" plain "%i\n%?"
                                          :target (file+head "%<%Y%m%d>-${slug}.org"
                                                             "#+title: ${title}")
                                          :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))
  (use-package org-roam-ui
    :ensure t)
  (require 'org-roam-protocol)
#+end_src
** calfw
#+begin_src emacs-lisp
  (use-package calfw
    :ensure t)
  (use-package calfw-cal
    :ensure t)
  (use-package calfw-org
    :ensure t
    :bind
    ("M-<f3>" . cfw:open-org-calendar)
    :config
    ;; hotfix: incorrect time range display
    ;; source: https://github.com/zemaye/emacs-calfw/commit/3d17649c545423d919fd3bb9de2efe6dfff210fe
    (defun cfw:org-get-timerange (text)
      "Return a range object (begin end text). If TEXT does not have a range, return nil."
      (let* ((dotime (cfw:org-tp text 'dotime)))
        (and (stringp dotime) (string-match org-ts-regexp dotime)
             (let* ((matches  (s-match-strings-all org-ts-regexp dotime))
                    (start-date (nth 1 (car matches)))
                    (end-date (nth 1 (nth 1 matches)))
                    (extra (cfw:org-tp text 'extra)))
               (if (string-match "(\\([0-9]+\\)/\\([0-9]+\\)): " extra)
                   ( list( calendar-gregorian-from-absolute
                           (time-to-days
                            (org-read-date nil t start-date))
                           )
                         (calendar-gregorian-from-absolute
                          (time-to-days
                           (org-read-date nil t end-date))) text)))))))
#+end_src
** org-ql
#+begin_src emacs-lisp
  ;(use-package org-ql
  ;  :ensure t)
#+end_src
** Code blocks
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (R . t)))
#+end_src
** org-download
#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :config
    (require 'org-download)
    (add-hook 'dired-mode-hook 'org-download-enable)
    (setq-default org-download-image-dir "/home/barry/Dropbox/Documents/org-roam/images")
    (setq-default org-download-heading-lvl nil)
    (setq rg-download-timestamp "%Y%m%d-%H%M%S_")
    (setq rg-image-actual-width 300))
#+end_src
** org-refile
#+begin_src emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
#+end_src
** ox-latex
#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src
* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/software/projects")
      (setq projectile-project-search-path '("~/software/projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  ;; (use-package counsel-projectile
  ;;   :ensure t
  ;;   :config (counsel-projectile-mode))
#+end_src
* Programming
** General
#+begin_src emacs-lisp
  (setq default-tab-width 4)
  (show-paren-mode 1)
#+end_src
** Langauges
*** LSP Mode
#+begin_src emacs-lisp
  (defun bjb/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . bjb/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c q")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+end_src
** Terminals
*** term
#+begin_src emacs-lisp
  (use-package term
    :ensure t
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  (use-package eterm-256color
    :ensure t
    :hook (term-mode . eterm-256color-mode))
#+end_src
** Rainbow Delimiters
#+begin_src emacs-lisp
;;  (use-package rainbow-delimiters
;;    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** exec-path-from-shell
#+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :ensure t)
#+end_src
** Magit
#+begin_src emacs-lisp
    (use-package magit
      :ensure t)

    (global-set-key (kbd "C-x g") 'magit-status)

    ;; (setq auth-sources '("~/.authinfo"))
  (setq github.user "barrybridgens")
(exec-path-from-shell-copy-env "SSH_AGENT_PID")
(exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
#+end_src
** Slime
#+begin_src emacs-lisp
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "sbcl")
  (global-set-key "\C-cs" 'slime-selector)
#+end_src
** Geiser
#+begin_src emacs-lisp
  (use-package geiser-guile
    :ensure t)
#+end_src
** Clojure
#+begin_src emacs-lisp
;  (use-package cider
;    :ensure t)
#+end_src
** Golang
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t)
  (use-package go-playground
    :ensure t)
#+end_src
** C_cpp
#+begin_src emacs-lisp
  (defun my-c-mode-hook ()
    (c-set-offset 'substatement-open 0))
  (add-hook 'c-mode-hook 'my-c-mode-hook)
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rustic
  :ensure
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t))
  (add-hook 'before-save-hook 'lsp-format-buffer nil t))
#+end_src
* emacs-lisp
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+end_src
* My elisp functions
** General functions
#+begin_src emacs-lisp
  (defun bjb-go-dot-emacs-d ()
    (interactive)
    (cd "/home/barry/.emacs.d"))

  (defun bjb-go-org ()
    (interactive)
    (cd "/home/barry/Dropbox/Documents/org"))

  (defun bjb-count-cameras ()
    "Count the number of cameras in my cameras table"
    (interactive)
    (switch-to-buffer "_photography.org")
    (goto-char (point-min))
    (search-forward "* My Cameras" nil nil)
    (beginning-of-line)
    (next-line 3)
    (let ((count 0)
          (done nil))
      (while (not done)
        (beginning-of-line)
        (if (not (eq (char-after) ?|))
            (setq done t)
          (progn
            (forward-char 2)
            (if (not (or (eq ?- (char-after)) (eq ?\s (char-after))))
                (setq count (+ count 1)))))
        (next-line))
      (insert "Number of cameras: ")
      (insert (format "%d" count))))

#+end_src
** Journal file functions
#+begin_src emacs-lisp

  (defun bjb-journal-new-entry ()
    "Add a new journal entry at the end of the journal file"
    (interactive)
    (switch-to-buffer "_journal_2024.org")
    (goto-char (point-max))
    (if (string-equal (format-time-string "%e") " 1")
        (insert (format-time-string "\n* %B\n")))
    (insert (format-time-string "\n** %A "))
    (insert (format-time-string "%e "))
    (insert (format-time-string "%B "))
    (insert (format-time-string "%Y\n"))
    (if (or
         (string-equal (format-time-string "%A") "Monday")
         (string-equal (format-time-string "%A") "Tuesday")
         (string-equal (format-time-string "%A") "Wednesday")
         (string-equal (format-time-string "%A") "Thursday")
         (string-equal (format-time-string "%A") "Friday"))
        (insert "*** Working from home - edit or delete if not!\n"))
    (insert "*** In the house\n")
    (insert "*** Out and about\n")
    (insert "*** Food\n")
    (insert "*** Physical\n")
    (insert "*** Mental\n")
    (insert "*** Other\n"))


  (defun bjb-journal-new-entry-tomorrow ()
    "Add a new journal entry for tomorrow at the end of the journal file"
    (interactive)
    (switch-to-buffer "_journal_2024.org")
    (goto-char (point-max))
    (let ((tomorrow (time-add (current-time) (* 60 60 24))))
      (if (string-equal (format-time-string "%e" tomorrow) " 1")
          (insert (format-time-string "\n* %B\n" tomorrow)))
      (insert (format-time-string "\n** %A " tomorrow))
      (insert (format-time-string "%e " tomorrow))
      (insert (format-time-string "%B " tomorrow))
      (insert (format-time-string "%Y\n" tomorrow))
      (if (or
           (string-equal (format-time-string "%A" tomorrow) "Monday")
           (string-equal (format-time-string "%A" tomorrow) "Tuesday")
           (string-equal (format-time-string "%A" tomorrow) "Wednesday")
           (string-equal (format-time-string "%A" tomorrow) "Thursday")
           (string-equal (format-time-string "%A" tomorrow) "Friday"))
          (insert "*** Working from home - edit or delete if not!\n")))
    (insert "*** In the house\n")
    (insert "*** Out and about\n")
    (insert "*** Food\n")
    (insert "*** Physical\n")
    (insert "*** Mental\n")
    (insert "*** Other\n"))


  (defun bjb-new-weekly-review ()
      "Add a new weekly review entry at the end of the journal file"
    (interactive)
    (switch-to-buffer "_journal_2024.org")
    (goto-char (point-max))
    (insert (format-time-string "\n** Week %V "))
    (insert (format-time-string "%G - Weekly Review\n"))
    (insert "*** Checklist [/]\n")
    (insert "- [ ] Process all items in [[file:inbox.org][inbox.org]]\n")
    (insert "- [ ] Process all items in Evernote InBox\n")
    (insert "- [ ] Process all items in my physical inbox\n")
    (insert "- [ ] Check tasks in [[file:_todos.org][todos.org]] and add date and/or priority where appropriate\n")
    (insert "- [ ] Check overdue items in *agenda view*\n")
    (insert "- [ ] Check the HOME and WORK calendars for next week to see if there is anything that needs to be prepared for\n")
    (insert "- [ ] Check email inbox and folders - make sure everything is in the correct place (Make sure to check _TEMP, _ACTIONS and _HOLD)\n")
    (insert "- [ ] Review tasks in *agenda view* for next week\n")
    (insert "- [ ] Read back last week's notes in org-mode and my paper journal\n")
    (insert "- [ ] Review / update my goals\n")
    (insert "\n")
    (insert "*** Notable things that happened this week\n"))

#+end_src

** Table functions
#+begin_src emacs-lisp
  (defun bjb-table-new-row-above ()
    (interactive)
    (org-shiftmetadown)
    (org-table-insert-hline))

  (defun bjb-media-table-new-entry ()
    (interactive)
    (bjb-table-new-row-above)
    (beginning-of-line)
    (forward-char 2)
    (insert (format-time-string "%e "))
    (insert (format-time-string "%B "))    (insert (format-time-string "%Y"))
    (execute-kbd-macro [?\t]))

  (defun bjb-table-copy-up ()
    "Copy the contents of the cell below into the current"
    (interactive)
    (next-line 2)
    (copy-region-as-kill (point)
                         (progn
                           (search-forward "|" nil nil)
                           (forward-char -1)
                           (point)))
    (next-line -2)
    (yank)
    (execute-kbd-macro [?\t]))

#+end_src
* Key Bindings
** general.el
#+begin_src emacs-lisp
;;    (use-package general
;;    :ensure t
;;     :config
;;     (general-create-definer bjb/leader-keys
;;        :keymaps '(normal insert visual emacs)
;;        :prefix "SPC"
;;        :global-prefix "C-SPC")

;;      (bjb/leader-keys
;;      "t"  '(:ignore t :which-key "toggles")
;;      "tt" '(counsel-load-theme :which-key "choose theme")))
#+end_src
** Evil
#+begin_src emacs-lisp
 ;; (use-package evil
 ;;   :ensure t
 ;;   :init
 ;;   (setq evil-want-integration t)
 ;;   (setq evil-want-keybinding nil)
 ;;   (setq evil-want-C-u-scroll t)
 ;;   (setq evil-want-C-i-jump nil)
 ;;   :config
 ;;   (evil-mode 1)
 ;;   (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
 ;;   (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
 ;;   (evil-global-set-key 'motion "j" 'evil-next-visual-line)
 ;;   (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

 ;;   (evil-set-initial-state 'messages-buffer-mode 'normal)
 ;;   (evil-set-initial-state 'dashboard-mode 'normal))

 ;; (use-package evil-collection
 ;;   :ensure t
 ;;   :after evil
 ;;   :config
 ;;   (evil-collection-init))
#+end_src
** Hydra
#+begin_src emacs-lisp
;;  (use-package hydra
;;    :ensure t)

;;  (defhydra hydra-text-scale (:timeout 4)
;;    "scale text"
;;    ("j" text-scale-increase "in")
;;    ("k" text-scale-decrease "out")
;;    ("f" nil "finished" :exit t))

;;  (bjb/leader-keys
;;    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
** Window sizing
#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+end_src
** My Key Bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") 'bjb-table-copy-up)
#+end_src
* Register setup
#+begin_src emacs-lisp
  (set-register ?j (cons 'file (concat org-roam-directory "/_journal_2024.org")))
  (set-register ?n (cons 'file (concat org-roam-directory "/_quick_notes.org")))
  (set-register ?t (cons 'file (concat org-roam-directory "/_todos.org")))
  (set-register ?p (cons 'file (concat org-roam-directory "/_photography.org")))
  (set-register ?m (cons 'file (concat org-roam-directory "/20220116113541-master_index.org")))
  (set-register ?b (cons 'file (concat org-roam-directory "/inbox.org")))
  (set-register ?i (cons 'file "~/.emacs.d/my-init.org"))
#+end_src
* Attachments
#+begin_src emacs-lisp
  (setq org-attach-store-link-p 'attached)
#+end_src
* All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :ensure t)
#+end_src
* Page Break Lines
#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t)
#+end_src
* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init (dashboard-setup-startup-hook)
    :bind ("C-c d" . dashboard-open)
    :config
    (require 'dashboard)
    (setq dashboard-items '((recents . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 15)
                            (registers . 5)))
    (setq dashboard-startup-banner nil)
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t))
#+end_src
* vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src
* Nixos
#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t)
#+end_src
* org-ai
#+begin_src elisp
  (use-package org-ai
    :ensure t
    :commands (org-ai-mode
               org-ai-global-mode)
    :init
    (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
    (org-ai-global-mode) ; installs global keybindings on C-c M-a
    )

  (setq auth-sources
      '((:source "~/.authinfo.gpg")))
#+end_src
* org-ql
#+begin_src elisp
  (use-package org-ql
    :ensure t)
#+end_src
